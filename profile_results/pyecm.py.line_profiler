Timer unit: 1e-06 s

File: pyecm.py
Function: invert at line 76
Total time: 0.427487 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                           	@profile
    77                                           	def invert(a, b):
    78                                           		'''Computes the inverse of a modulo b. b must be odd.
    79                                           
    80                                           Returns the inverse of a (mod b).'''
    81       230          403      1.8      0.1  		if a == 0 or b == 0:
    82                                           			return 0
    83                                           
    84       230          249      1.1      0.1  		truth = False
    85       230          255      1.1      0.1  		if a < 0:
    86                                           			truth = True
    87                                           			a = -a
    88                                           
    89       230          212      0.9      0.0  		b_orig = b
    90       230          211      0.9      0.0  		alpha = 1
    91       230          222      1.0      0.1  		beta = 0
    92                                           
    93       424          569      1.3      0.1  		while not a & 1:
    94       194          226      1.2      0.1  			if alpha & 1:
    95       112          163      1.5      0.0  				alpha += b_orig
    96       194          252      1.3      0.1  			alpha >>= 1
    97       194          218      1.1      0.1  			a >>= 1
    98                                           
    99       230          248      1.1      0.1  		if b > a:
   100       230          239      1.0      0.1  			a, b = b, a
   101       230          241      1.0      0.1  			alpha, beta = beta, alpha
   102                                           
   103     24834        29747      1.2      7.0  		while b != 0 and a != b:
   104     24604        26940      1.1      6.3  			a -= b
   105     24604        26910      1.1      6.3  			alpha -= beta
   106                                           
   107     73584        86906      1.2     20.3  			while not a & 1:
   108     48980        55889      1.1     13.1  				if alpha & 1:
   109     25106        28201      1.1      6.6  					alpha += b_orig
   110     48980        59761      1.2     14.0  				alpha >>= 1
   111     48980        55045      1.1     12.9  				a >>= 1
   112                                           			
   113     24604        25288      1.0      5.9  			if b > a:
   114     13156        13600      1.0      3.2  				a,b = b,a
   115     13156        13544      1.0      3.2  				alpha, beta = beta, alpha
   116                                           
   117       230          235      1.0      0.1  		if a == b:
   118       230          261      1.1      0.1  			a -= b
   119       230          258      1.1      0.1  			alpha -= beta
   120       230          235      1.0      0.1  			a, b = b, a
   121       230          245      1.1      0.1  			alpha, beta = beta, alpha
   122                                           
   123       230          268      1.2      0.1  		if a != 1:
   124         1            1      1.0      0.0  			return 0
   125                                           
   126       229          227      1.0      0.1  		if truth:
   127                                           			alpha = b_orig - alpha
   128                                           		
   129       229          218      1.0      0.1  		return alpha

File: pyecm.py
Function: double at line 431
Total time: 1.27076 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   431                                           @profile
   432                                           def double(p, n):
   433                                           	'''Doubles each point in the input list. Much like the add function, we take advantage of fast inversion.
   434                                           
   435                                           Returns the doubled list.'''
   436       208          922      4.4      0.1  	inv = range(len(p))
   437                                           
   438     19136        19680      1.0      1.5  	for i in xrange(len(p)):
   439     18928        26903      1.4      2.1  		inv[i] = p[i][1] << 1
   440                                           
   441       208       998041   4798.3     78.5  	inv = parallel_invert(inv, n)
   442                                           
   443       208          421      2.0      0.0  	if not isinstance(inv, list):
   444                                           		return inv
   445                                           
   446     19136        20290      1.1      1.6  	for i in xrange(len(p)):
   447     18928        22958      1.2      1.8  		x = p[i][0]
   448     18928        35512      1.9      2.8  		m = (x * x) % n
   449     18928        48911      2.6      3.8  		m = ((m + m + m + p[i][2]) * inv[i]) % n
   450     18928        44906      2.4      3.5  		p[i][0] = (m * m - x - x) % n
   451     18928        51985      2.7      4.1  		p[i][1] = (m * (x - p[i][0]) - p[i][1]) % n
   452                                           
   453       208          235      1.1      0.0  	return p

File: pyecm.py
Function: parallel_invert at line 538
Total time: 0.971774 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   538                                           @profile
   539                                           def parallel_invert(l, n):
   540                                           	'''Inverts all elements of a list modulo some number, using 3(n-1) modular multiplications and one inversion.
   541                                           
   542                                           Returns the list with all elements inverted modulo 3(n-1).'''
   543       230          479      2.1      0.0  	l_ = l[:]
   544     20930        20740      1.0      2.1  	for i in xrange(len(l)-1):
   545     20700        43498      2.1      4.5  		l[i+1] = (l[i] * l[i+1]) % n
   546                                           	
   547       230       804621   3498.4     82.8  	inv = invert(l[-1], n)
   548       230          311      1.4      0.0  	if inv == 0:
   549         1          435    435.0      0.0  		return gcd(l[-1], n)
   550                                           
   551     20839        21461      1.0      2.2  	for i in xrange(len(l)-1, 0, -1):
   552     20610        41223      2.0      4.2  		l[i] = (inv * l[i-1]) % n
   553     20610        38521      1.9      4.0  		inv = (inv * l_[i]) % n
   554       229          254      1.1      0.0  	l[0] = inv
   555                                           
   556       229          231      1.0      0.0  	return l

