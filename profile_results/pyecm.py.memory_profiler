test
11
197
909091
5076141624365532994918781726395939035533
Filename: pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
    76                             	@profile
    77                             	def invert(a, b):
    78                             		'''Computes the inverse of a modulo b. b must be odd.
    79                             
    80    11.754 MB     0.000 MB   Returns the inverse of a (mod b).'''
    81    28.969 MB    17.215 MB   		if a == 0 or b == 0:
    82                             			return 0
    83                             
    84    28.969 MB     0.000 MB   		truth = False
    85    28.969 MB     0.000 MB   		if a < 0:
    86                             			truth = True
    87                             			a = -a
    88                             
    89    28.969 MB     0.000 MB   		b_orig = b
    90    28.969 MB     0.000 MB   		alpha = 1
    91    22.930 MB    -6.039 MB   		beta = 0
    92                             
    93    28.969 MB     6.039 MB   		while not a & 1:
    94    28.969 MB     0.000 MB   			if alpha & 1:
    95    24.012 MB    -4.957 MB   				alpha += b_orig
    96    28.969 MB     4.957 MB   			alpha >>= 1
    97    28.195 MB    -0.773 MB   			a >>= 1
    98                             
    99    28.969 MB     0.773 MB   		if b > a:
   100    28.969 MB     0.000 MB   			a, b = b, a
   101    11.852 MB   -17.117 MB   			alpha, beta = beta, alpha
   102                             
   103    29.008 MB    17.156 MB   		while b != 0 and a != b:
   104    29.008 MB     0.000 MB   			a -= b
   105    18.379 MB   -10.629 MB   			alpha -= beta
   106                             
   107    29.008 MB    10.629 MB   			while not a & 1:
   108    29.008 MB     0.000 MB   				if alpha & 1:
   109    21.496 MB    -7.512 MB   					alpha += b_orig
   110    29.008 MB     7.512 MB   				alpha >>= 1
   111    29.008 MB     0.000 MB   				a >>= 1
   112                             			
   113    29.008 MB     0.000 MB   			if b > a:
   114    29.008 MB     0.000 MB   				a,b = b,a
   115    29.008 MB     0.000 MB   				alpha, beta = beta, alpha
   116                             
   117    29.008 MB     0.000 MB   		if a == b:
   118    29.008 MB     0.000 MB   			a -= b
   119    29.008 MB     0.000 MB   			alpha -= beta
   120    29.008 MB     0.000 MB   			a, b = b, a
   121    29.008 MB     0.000 MB   			alpha, beta = beta, alpha
   122                             
   123    29.008 MB     0.000 MB   		if a != 1:
   124    29.008 MB     0.000 MB   			return 0
   125    11.754 MB   -17.254 MB   
   126    28.945 MB    17.191 MB   		if truth:
   127                             			alpha = b_orig - alpha
   128                             		
   129    28.945 MB     0.000 MB   		return alpha


Filename: pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
   538                             @profile
   539                             def parallel_invert(l, n):
   540                             	'''Inverts all elements of a list modulo some number, using 3(n-1) modular multiplications and one inversion.
   541                             
   542    11.746 MB     0.000 MB   Returns the list with all elements inverted modulo 3(n-1).'''
   543    11.844 MB     0.098 MB   	l_ = l[:]
   544    28.965 MB    17.121 MB   	for i in xrange(len(l)-1):
   545    28.969 MB     0.004 MB   		l[i+1] = (l[i] * l[i+1]) % n
   546                             	
   547    29.008 MB     0.039 MB   	inv = invert(l[-1], n)
   548    29.008 MB     0.000 MB   	if inv == 0:
   549    29.008 MB     0.000 MB   		return gcd(l[-1], n)
   550    11.754 MB   -17.254 MB   
   551    28.949 MB    17.195 MB   	for i in xrange(len(l)-1, 0, -1):
   552    28.949 MB     0.000 MB   		l[i] = (inv * l[i-1]) % n
   553    28.949 MB     0.000 MB   		inv = (inv * l_[i]) % n
   554    28.949 MB     0.000 MB   	l[0] = inv
   555                             
   556    28.949 MB     0.000 MB   	return l


Filename: pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
   431                             @profile
   432                             def double(p, n):
   433                             	'''Doubles each point in the input list. Much like the add function, we take advantage of fast inversion.
   434                             
   435    11.770 MB     0.000 MB   Returns the doubled list.'''
   436    11.902 MB     0.133 MB   	inv = range(len(p))
   437                             
   438    28.887 MB    16.984 MB   	for i in xrange(len(p)):
   439    28.887 MB     0.000 MB   		inv[i] = p[i][1] << 1
   440                             
   441    28.949 MB     0.062 MB   	inv = parallel_invert(inv, n)
   442                             
   443    11.973 MB   -16.977 MB   	if not isinstance(inv, list):
   444                             		return inv
   445                             
   446    28.961 MB    16.988 MB   	for i in xrange(len(p)):
   447    28.961 MB     0.000 MB   		x = p[i][0]
   448    28.961 MB     0.000 MB   		m = (x * x) % n
   449    28.961 MB     0.000 MB   		m = ((m + m + m + p[i][2]) * inv[i]) % n
   450    28.961 MB     0.000 MB   		p[i][0] = (m * m - x - x) % n
   451    28.961 MB     0.000 MB   		p[i][1] = (m * (x - p[i][0]) - p[i][1]) % n
   452                             
   453    28.961 MB     0.000 MB   	return p


